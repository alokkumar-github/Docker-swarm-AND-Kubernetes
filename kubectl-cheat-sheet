microk8s ::::::   https://thenewstack.io/set-up-microk8s-to-run-an-edge-application/
microk8s ctr images ls  see for more https://microk8s.io/docs/registry-images 

Minikube as default is using 2048MB of memory and 2 CPUs. More details about this can be fund here In addition, 
you can enforce Minikue to create more using command minikube start --cpus 4 --memory 8192

to see service kubectl get svc and then minikube service <my-keycloak>

use helm:
helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo update
helm install <release-name> bitnami/cassandra
helm delete/remove <release-name>
helm list
export 

Password=$(kubectl get secret --namespace default <secret-oject-name> -o jsonpath="{.data.mariadb-root-password}" | base64 --decode)
echo $Password
kubectl get secrets/<secret-oject-name>  -o json

An assortment of compact kubectl examples, obtained from: [http://kubernetes.io/docs/user-guide/kubectl-cheatsheet/](http://kubernetes.io/docs/user-guide/kubectl-cheatsheet/)

See also: Kubectl overview and JsonPath guide.
https://github.com/dennyzhang/cheatsheet-kubernetes-A4

ctrl+r  to recall the history - command typed

Kubectl Alias
Linux
alias k=kubectl
Windows
Set-Alias -Name k -Value kubectl

Cluster Info
Get clusters
kubectl config get-clusters
NAME
docker-for-desktop-cluster
foo
Get cluster info.
kubectl cluster-info
Kubernetes master is running at https://172.17.0.58:8443
Contexts
A context is a cluster, namespace and user.

Get a list of contexts.
kubectl config get-contexts
CURRENT   NAME                 CLUSTER                      AUTHINFO             NAMESPACE
          docker-desktop       docker-desktop               docker-desktop
*         foo                  foo                          foo                  bar
Get the current context.
kubectl config current-context
foo
Switch current context.
kubectl config use-conext docker-desktop
Set default namesapce
kubectl config set-context $(kubectl config current-context) --namespace=my-namespace
To switch between contexts, you can also install and use kubectx.

Get Commands
kubectl get all
kubectl get namespaces
kubectl get configmaps
kubectl get nodes
kubectl get pods
kubectl get rs
kubectl get svc kuard
kubectl get endpoints kuard
Additional switches that can be added to the above commands:

-o wide - Show more information.
--watch or -w - watch for changes.
Namespaces
--namespace - Get a resource for a specific namespace.
You can set the default namespace for the current context like so:

kubectl config set-context $(kubectl config current-context) --namespace=my-namespace
To switch namespaces, you can also install and use kubens.

Labels
Get pods showing labels.
kubectl get pods --show-labels
Get pods by label.
kubectl get pods -l environment=production,tier!=frontend
kubectl get pods -l 'environment in (production,test),tier notin (frontend,backend)'
Describe Command
kubectl describe nodes [id]
kubectl describe pods [id]
kubectl describe rs [id]
kubectl describe svc kuard [id]
kubectl describe endpoints kuard [id]
Delete Command
kubectl delete nodes [id]
kubectl delete pods [id]
kubectl delete rs [id]
kubectl delete svc kuard [id]
kubectl delete endpoints kuard [id]
Force a deletion of a pod without waiting for it to gracefully shut down

kubectl delete pod-name --grace-period=0 --force
Create vs Apply
kubectl create can be used to create new resources while kubectl apply inserts or updates resources while maintaining any manual changes made like scaling pods.

--record - Add the current command as an annotation to the resource.
--recursive - Recursively look for yaml in the specified directory.
Create Pod
kubectl run kuard --generator=run-pod/v1 --image=gcr.io/kuar-demo/kuard-amd64:1 --output yaml --export --dry-run > kuard-pod.yml
kubectl apply -f kuard-pod.yml
Create Deployment
kubectl run kuard --image=gcr.io/kuar-demo/kuard-amd64:1 --output yaml --export --dry-run > kuard-deployment.yml
kubectl apply -f kuard-deployment.yml
Create Service
kubectl expose deployment kuard --port 8080 --target-port=8080 --output yaml --export --dry-run > kuard-service.yml
kubectl apply -f kuard-service.yml
Export YAML for New Pod
kubectl run my-cool-app â€”-image=me/my-cool-app:v1 --output yaml --export --dry-run > my-cool-app.yaml
Export YAML for Existing Object
kubectl get deployment my-cool-app --output yaml --export > my-cool-app.yaml
Logs
Get logs.
kubectl logs -l app=kuard
Get logs for previously terminated container.
kubectl logs POD_NAME --previous
Watch logs in real time.
kubectl attach POD_NAME
Copy files out of pod (Requires tar binary in container).
kubectl cp POD_NAME:/var/log .
You can also install and use kail.

Port Forward
kubectl port-forward deployment/kuard 8080:8080
Scaling
Update replicas.
kubectl scale deployment nginx-deployment --replicas=10
Autoscaling
Set autoscaling config.
kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80
Rollout
Get rollout status.
kubectl rollout status deployment/nginx-deployment
Waiting for rollout to finish: 2 out of 3 new replicas have been updated...
deployment "nginx-deployment" successfully rolled out
Get rollout history.
kubectl rollout history deployment/nginx-deployment
kubectl rollout history deployment/nginx-deployment --revision=2
Undo a rollout.
kubectl rollout undo deployment/nginx-deployment
kubectl rollout undo deployment/nginx-deployment --to-revision=2
Pause/resume a rollout
kubectl rollout pause deployment/nginx-deployment
kubectl rollout resume deploy/nginx-deployment
Pod Example
apiVersion: v1
kind: Pod
metadata:
  name: cuda-test
spec:
  containers:
    - name: cuda-test
      image: "k8s.gcr.io/cuda-vector-add:v0.1"
      resources:
        limits:
          nvidia.com/gpu: 1
  nodeSelector:
    accelerator: nvidia-tesla-p100
Deployment Example
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: my-namespace
  labels:
    - environment: production,
    - teir: frontend
  annotations:
    - key1: value1,
    - key2: value2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
Dashboard
Enable proxy
kubectl proxy
Azure Kubernetes Service
List of az aks commands

Get Credentials
az aks get-credentials --resource-group <Resource Group Name> --name <AKS Name>
Show Dashboard
Secure the dashboard like this. Then run:

az aks browse --resource-group <Resource Group Name> --name <AKS Name>
Upgrade
Get updates

az aks get-upgrades --resource-group <Resource Group Name> --name <AKS Name>

# debugging technique
```
$ kubectl describe <k8s-resources>
$ kubectl logs <podname>
$ kubectl exec <pod-name> -- ls /  
```


# Creating Objects
```
$ kubectl create -f ./file.yml                   # create resource(s) in a json or yaml file

$ kubectl create -f ./file1.yml -f ./file2.yaml  # create resource(s) in a json or yaml file

$ kubectl create -f ./dir                        # create resources in all .json, .yml, and .yaml files in dir

# Create from a URL

$ kubectl create -f http://www.fpaste.org/279276/48569091/raw/


# Create multiple YAML objects from stdin

$ cat <<EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: busybox-sleep
spec:
  containers:
  - name: busybox
    image: busybox
    args:
    - sleep
    - "1000000"
---
apiVersion: v1
kind: Pod
metadata:
  name: busybox-sleep-less
spec:
  containers:
  - name: busybox
    image: busybox
    args:
    - sleep
    - "1000"
EOF


# Create a secret with several keys

$ cat <<EOF | kubectl create -f -
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  password: $(echo "s33msi4" | base64)
  username: $(echo "jane" | base64)
EOF
```


# Viewing, Finding Resources

```
# Columnar output
$ kubectl get services                          # List all services in the namespace
$ kubectl get pods --all-namespaces             # List all pods in all namespaces
$ kubectl get pods -o wide                      # List all pods in the namespace, with more details
$ kubectl get rc <rc-name>                      # List a particular replication controller
$ kubectl get replicationcontroller <rc-name>   # List a particular RC

# Verbose output
$ kubectl describe nodes <node-name>
$ kubectl describe pods <pod-name>
$ kubectl describe pods/<pod-name>              # Equivalent to previous
$ kubectl describe pods <rc-name>               # Lists pods created by <rc-name> using common prefix

# List Services Sorted by Name
$ kubectl get services --sort-by=.metadata.name

# List pods Sorted by Restart Count
$ kubectl get pods --sort-by=.status.containerStatuses[0].restartCount

# Get the version label of all pods with label app=cassandra
$ kubectl get pods --selector=app=cassandra rc -o 'jsonpath={.items[*].metadata.labels.version}'
$ kubetl get pods --selector env=dev

# Get ExternalIPs of all nodes
$ kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'

# List Names of Pods that belong to Particular RC
# "jq" command useful for transformations that are too complex for jsonpath
$ sel=$(./kubectl get rc <rc-name> --output=json | jq -j '.spec.selector | to_entries | .[] | "\(.key)=\(.value),"')
$ sel=${sel%?} # Remove trailing comma
$ pods=$(kubectl get pods --selector=$sel --output=jsonpath={.items..metadata.name})`

# Check which nodes are ready
$ kubectl get nodes -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'| tr ';' "\n"  | grep "Ready=True" 
```

# Modifying and Deleting Resources

```
$ kubectl get pods --show-labels
$ kubectl label pods <pod-name> new-label=awesome                  # Add a Label
$ kubectl label pods <podname> <newlabelname>=<value> --override
$ kubectl annotate pods <pod-name> icon-url=http://goo.gl/XXBTWq   # Add an annotation

# TODO: examples of kubectl edit, patch, delete, replace, scale, and rolling-update commands.
```

# change from xxx to NodePort
$ kubectl patch svc you-svc -p '{"spec": {"type": "NodePort"}}'

# Interacting with running Pods

```
$ kubectl logs <pod-name>         # dump pod logs (stdout)
$ kubectl logs -f <pod-name>      # stream pod logs (stdout) until canceled (ctrl-c) or timeout

$ kubectl run -i --tty busybox --image=busybox -- sh      # Run pod as interactive shell
$ kubectl attach <podname> -i                             # Attach to Running Container
$ kubectl port-forward <podname> <local-and-remote-port>  # Forward port of Pod to your local machine
$ kubectl port-forward <servicename> <port>               # Forward port to service
$ kubectl exec <pod-name> -- ls /                         # Run command in existing pod (1 container case) 
$ kubectl exec <pod-name> -c <container-name> -- ls /     # Run command in existing pod (multi-container case) 
```

